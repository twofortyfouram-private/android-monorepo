/*
 * android-plugin-sdk-for-locale
 * https://github.com/twofortyfouram/android-plugin-sdk-for-locale
 * Copyright (C) 2008â€“2018 two forty four a.m. LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

boolean is_dexguard = Boolean.parseBoolean(IS_DEXGUARD_ENABLED)

apply plugin: 'com.android.library'
apply plugin: 'findbugs'

apply plugin: 'maven'
group = 'com.twofortyfouram'
archivesBaseName = 'android-plugin-host-sdk-for-locale'
version = LIBRARY_VERSION_NAME

dependencies {
    // support-v4 is optional for backwards compatibility
    compileOnly group:'com.android.support', name:'support-v4', version:"${ANDROID_SUPPORT_VERSION_MATCHER}"
    
    implementation group:'com.android.support', name:'support-annotations', version:"${ANDROID_SUPPORT_VERSION_MATCHER}"
    implementation group:'net.jcip', name:'jcip-annotations', version:"${JCIP_ANNOTATION_VERSION_MATCHER}"
    implementation project(':annotationLib')
    implementation project(':assertionLib')
    implementation project(':pluginApiLib')
    implementation project(':pluginClientSdkLib')
    implementation project(':spackleLib')

    androidTestImplementation group:'com.android.support.test.espresso', name:'espresso-core', version:"${ESPRESSO_VERSION_MATCHER}"
    androidTestImplementation group:'com.android.support.test.espresso', name:'espresso-intents', version:"${ESPRESSO_VERSION_MATCHER}"
    androidTestImplementation project(':testLib')
}

android {
    compileSdkVersion Integer.parseInt(ANDROID_COMPILE_SDK_VERSION)

    resourcePrefix 'com_twofortyfouram_locale_sdk_host_'

    defaultConfig {
        minSdkVersion Integer.parseInt(ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(ANDROID_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(ANDROID_VERSION_CODE)
        versionName ANDROID_VERSION_NAME
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-consumer.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled Boolean.parseBoolean(IS_COVERAGE_ENABLED)
        }
        release {
            // Obfuscation is enabled to cleanup classes declared public
            // but which are considered internal APIs
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://api.bintray.com/maven/twofortyfouram/maven/android-plugin-host-sdk-for-locale') {
                authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
            }
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def androidHome = System.getenv('ANDROID_HOME')
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += variant.javaCompile.classpath
        classpath += variant.javaCompile.outputs.files
        options.linksOffline('https://developer.android.com/reference/', "${androidHome}/docs/reference")
        options.links('http://jcip.net.s3-website-us-east-1.amazonaws.com/annotations/doc/', 'https://twofortyfouram.github.io/android-annotation/', 'https://twofortyfouram.github.io/android-plugin-api-for-locale/')
        exclude '**/R.java'
        exclude 'com/twofortyfouram/locale/sdk/host/internal**'
    }
}

// Generates the JavaDoc as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }

    project.artifacts.add('archives', tasks["${variant.name}JavadocJar"]);
}


// Generates the source as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}SourceJar", type: Jar) {
        classifier = 'sources'
        from variant.javaCompile.source
    }

    project.artifacts.add('archives', tasks["${variant.name}SourceJar"]);
}

task findbugs(type: FindBugs, dependsOn: ':pluginHostSdkLib:compileReleaseSources') {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/release/')
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = file("${rootProject.projectDir}/tools/findbugs/android-filter.xml")
    effort = 'max'
    reportLevel = 'low'
    reports {
        // Only one report type can be enabled at a time, apparently.
        xml.enabled = false
        html.enabled = true
        html.destination = "${project.buildDir}/outputs/reports/findbugs/findbugs.html"
    }
}
