/*
 * android-plugin-host-sdk-for-locale
 * https://github.com/twofortyfouram/android-monorepo
 * Copyright (C) 2008â€“2018 two forty four a.m. LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */


boolean is_test_orchestrator = Boolean.parseBoolean(isUseTestOrchestrator)

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

apply plugin: "maven"
group = "com.twofortyfouram"
archivesBaseName = "android-plugin-host-sdk-for-locale"
version = LIBRARY_VERSION_NAME

dependencies {
    implementation("androidx.fragment:fragment:${ANDROID_FRAGMENT_VERSION_MATCHER}")
    
    implementation("androidx.annotation:annotation:${ANDROID_ANNOTATION_VERSION_MATCHER}")
    implementation("net.jcip:jcip-annotations:${JCIP_ANNOTATION_VERSION_MATCHER}")
    implementation(project(":annotationLib"))
    implementation(project(":assertionLib"))
    implementation(project(":pluginApiLib"))
    implementation(project(":pluginClientSdkLib"))
    implementation(project(":spackleLib"))

    androidTestImplementation("androidx.test.espresso:espresso-core:${ESPRESSO_VERSION_MATCHER}")
    androidTestImplementation("androidx.test.espresso:espresso-intents:${ESPRESSO_VERSION_MATCHER}")
    androidTestImplementation(project(":testLib"))

    if (is_test_orchestrator) {
        androidTestUtil("androidx.test:orchestrator:${ANDROID_TEST_ORCHESTRATOR_VERSION_MATCHER}:apk")
    }
}

android {
    resourcePrefix "com_twofortyfouram_locale_sdk_host_"

    lintOptions {
        lintConfig file("lint.xml")
        checkDependencies Boolean.parseBoolean(IS_LINT_CHECK_DEPENDENCIES)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        animationsDisabled true
        if (is_test_orchestrator) {
            execution "ANDROIDX_TEST_ORCHESTRATOR"
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://api.bintray.com/maven/twofortyfouram/maven/android-plugin-host-sdk-for-locale') {
                authentication(userName: TWOFORTYFOURAM_MONOREPO_MAVEN_USERNAME, password: TWOFORTYFOURAM_MONOREPO_MAVEN_PASSWORD)
            }
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def androidHome = System.getenv("ANDROID_HOME")
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += variant.javaCompile.classpath
        classpath += variant.javaCompile.outputs.files
        options.linksOffline("https://developer.android.com/reference/", "${androidHome}/docs/reference")
        options.links("http://jcip.net.s3-website-us-east-1.amazonaws.com/annotations/doc/", "https://twofortyfouram.github.io/android-annotation/", 'https://twofortyfouram.github.io/android-plugin-api-for-locale/')
        exclude "**/R.java"
        exclude "com/twofortyfouram/locale/sdk/host/internal**"
    }
}

// Generates the JavaDoc as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = "javadoc"
        from tasks["${variant.name}Javadoc"].destinationDir
    }

    project.artifacts.add("archives", tasks["${variant.name}JavadocJar"]);
}


// Generates the source as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}SourceJar", type: Jar) {
        classifier = "sources"
        from variant.javaCompile.source
    }

    project.artifacts.add("archives", tasks["${variant.name}SourceJar"]);
}
